#include "../minishell.h"

static void free_env_array(char ***env)
{
    int i;

    if (!env || !*env)
        return;
    i = 0;
    while ((*env)[i])
    {
        free((*env)[i]);
        i++;
    }
    free(*env);
    *env = NULL;
}

void    ms_cleanup(char ***env)
{
    free_env_array(env);
    rl_clear_history();
}
#include "../minishell.h"

char	**cpy_env_data(char **env)
{
	int		i;
	char	**arr;

	i = 0;
	while (env[i])
		i++;
	arr = malloc(sizeof(char *) * (i + 1));
	if (!arr)
		return (NULL);
	i = 0;
	while (env[i])
	{
		arr[i] = ft_strdup(env[i]);
		if (!arr[i])
		{
			while (--i >= 0)
				free(arr[i]);
			free(arr);
			return (NULL);
		}
		i++;
	}
	arr[i] = NULL;
	return (arr);
}

void	free_env_data(char **env)
{
	int	i;

	if (!env)
		return ;
	i = 0;
	while (env[i])
	{
		free(env[i]);
		i++;
	}
	free(env);
}
#include "../minishell.h"

int	g_exit_code(int code)
{
	static int	temp;

	if (code != -1)
		temp = code;
	return (temp);
}

void	signal_handler(int signal)
{
	(void)signal;
	write(1, "\n", 1);
	rl_replace_line("", 0);
	rl_on_new_line();
	rl_redisplay();
	g_exit_code(130);
}

void	set_signals(void)
{
	signal(SIGINT, signal_handler);
	signal(SIGQUIT, SIG_IGN);
}

void	set_child_signals(void)
{
	signal(SIGINT, SIG_DFL);
	signal(SIGQUIT, SIG_DFL);
}
